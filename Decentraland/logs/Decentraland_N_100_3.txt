--- Environment variables set --
PBT_ACCOUNTS=4
PBT_DEBUG=no
PBT_MAX_EXAMPLES=100
PBT_PROFILE=generate
PBT_SEED=0
PBT_STATEFUL_STEP_COUNT=5
PBT_TOKENS=6
PBT_VERIFY_EVENTS=yes
PBT_VERIFY_RETURN_VALUES=no
--- Running tests ---
============================= test session starts ==============================
platform linux -- Python 3.7.5, pytest-6.0.1, py-1.8.0, pluggy-0.13.1
rootdir: /home/halcyon/erc721-pbt/Decentraland
plugins: xdist-1.34.0, hypothesis-5.35.0, eth-brownie-1.11.12, web3-5.11.1, forked-1.3.0
collected 1 item

Launching 'ganache-cli --port 8545 --gasLimit 12000000 --accounts 10 --hardfork istanbul --mnemonic brownie'...

tests/test_Decentraland.py [?25l[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1D[0;33m\[1D[0;33m|[1D[0;33m/[1D[0;33m-[1DF[?25h                                             [100%]

=================================== FAILURES ===================================
________________________________ test_stateful _________________________________

contract2test = <brownie.network.contract.ContractContainer object at 0x7f1c5ec3fe90>
accounts = <brownie.network.account.Accounts object at 0x7f1c640ba810>
state_machine = <function state_machine at 0x7f1c6025b7a0>

    def test_stateful(contract2test, accounts, state_machine):
>       state_machine(FullAssetRegistry, accounts, contract2test)

tests/test_Decentraland.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.7/dist-packages/hypothesis/stateful.py:75: in run_state_machine_as_test
    def run_state_machine_as_test(state_machine_factory, *, settings=None):
/usr/local/lib/python3.7/dist-packages/hypothesis/internal/reflection.py:654: in accept
    return func(*bound.args, **bound.kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

factory = <function state_machine.<locals>.<lambda> at 0x7f1c5e9da3b0>

    @settings
>   @given(st.data())
    def run_state_machine(factory, data):
E   hypothesis.errors.MultipleFailures: Hypothesis found 4 distinct failures.

/usr/local/lib/python3.7/dist-packages/hypothesis/stateful.py:92: MultipleFailures
----------------------------- Captured stdout call -----------------------------

Falsifying example:state = BrownieStateMachine()state.rule_setApprovalForAll(st_bool=True, st_receiver=1, st_sender=3)state.rule_approve(st_receiver=0, st_sender=2, st_token=3)state.rule_approve(st_receiver=0, st_sender=3, st_token=5)state.teardown()
Traceback (most recent call last):  File "/home/halcyon/erc721-pbt/erc721_pbt.py", line 168, in rule_approve    self.wallets[st_receiver], st_token,{"from": self.wallets[st_sender]}  File "/home/halcyon/erc721-pbt/erc721_pbt.py", line 314, in alt_exit    return f(self, exc_type, exc_value, traceback)  File "brownie/test/managers/runner.py", line 65, in __exit__    raise AssertionError("Transaction did not revert")AssertionError: Transaction did not revert
You can reproduce this example by temporarily adding @reproduce_failure('5.35.0', b'AAABMQEDAAEBA4d4AAEABQAAAgcCi8IAAQAAAAME') as a decorator on your test case
Falsifying example:state = BrownieStateMachine()state.rule_safeTransferFrom(st_owner=1, st_receiver=1, st_sender=1, st_token=1)state.teardown()
Traceback (most recent call last):  File "/home/halcyon/erc721-pbt/erc721_pbt.py", line 118, in rule_safeTransferFrom    {"from": self.wallets[st_sender]},  File "brownie/network/contract.py", line 898, in __call__    return fn(*args)  # type: ignore  File "brownie/network/contract.py", line 1196, in __call__    return self.transact(*args)  File "brownie/network/contract.py", line 1079, in transact    data=self.encode_input(*args),  File "brownie/network/account.py", line 603, in transfer    receipt._raise_if_reverted(exc)  File "brownie/network/transaction.py", line 282, in _raise_if_reverted    raise exc._with_attr(source=source, revert_msg=self._revert_msg)brownie.exceptions.VirtualMachineError: revert[0;2;37mTrace step [0;1;34m-1[0;2;37m, program counter [0;1;34m3237[0;2;37m:
  [0;2;37mFile [0;1;35m"contracts/ERC721Base.sol"[0;2;37m, line [0;1;34m284[0;2;37m, in [0;1;36mERC721Base._moveToken[0;2;37m:    [0;2;37m
[0;2;37m      }
[0;2;37m      modifier destinataryIsNotHolder(uint256 assetId, address to) {
[0;2;37m        [0;mrequire(_ownerOf(assetId) != to)[0;2;37m;
[0;2;37m        _;
[0;2;37m      }
[0;2;37m    [0;m

You can reproduce this example by temporarily adding @reproduce_failure('5.35.0', b'AAABAgIAAQEBAA==') as a decorator on your test case
Falsifying example:state = BrownieStateMachine()state.rule_approve(st_receiver=1, st_sender=1, st_token=1)state.teardown()
Traceback (most recent call last):  File "/home/halcyon/erc721-pbt/erc721_pbt.py", line 156, in rule_approve    self.wallets[st_receiver], st_token,{"from": self.wallets[st_sender]}brownie.exceptions.VirtualMachineError: revert[0;2;37mTrace step [0;1;34m-1[0;2;37m, program counter [0;1;34m1626[0;2;37m:
  [0;2;37mFile [0;1;35m"contracts/ERC721Base.sol"[0;2;37m, line [0;1;34m173[0;2;37m, in [0;1;36mERC721Base.approve[0;2;37m:    [0;2;37m
[0;2;37m    function approve(address operator, uint256 assetId) external {
[0;2;37m      address holder = _ownerOf(assetId);
[0;2;37m      require(msg.sender == holder || _isApprovedForAll(msg.sender, holder));
[0;2;37m      [0;mrequire(operator != holder)[0;2;37m;
[0;2;37m      if (_getApprovedAddress(assetId) != operator) {
[0;2;37m        _approval[assetId] = operator;[0;m

You can reproduce this example by temporarily adding @reproduce_failure('5.35.0', b'AAAB4gAAAQEA') as a decorator on your test case
Falsifying example:state = BrownieStateMachine()state.rule_setApprovalForAll(st_bool=False, st_receiver=0, st_sender=3)state.teardown()
Traceback (most recent call last):  File "/home/halcyon/erc721-pbt/erc721_pbt.py", line 181, in rule_setApprovalForAll    self.wallets[st_receiver], st_bool, {"from":self.wallets[st_sender]})brownie.exceptions.VirtualMachineError: revert[0;2;37mTrace step [0;1;34m-1[0;2;37m, program counter [0;1;34m3092[0;2;37m:
  [0;2;37mFile [0;1;35m"contracts/ERC721Base.sol"[0;2;37m, line [0;1;34m159[0;2;37m, in [0;1;36mERC721Base._setApprovalForAll[0;2;37m:    [0;2;37m
[0;2;37m      require(!_isApprovedForAll(msg.sender, operator));
[0;2;37m      _addAuthorization(operator, msg.sender);
[0;2;37m    } else {
[0;2;37m      [0;mrequire(_isApprovedForAll(msg.sender, operator))[0;2;37m;
[0;2;37m      _clearAuthorization(operator, msg.sender);
[0;2;37m    }
[0;2;37m    emit ApprovalForAll(msg.sender, operator, authorized);[0;m

You can reproduce this example by temporarily adding @reproduce_failure('5.35.0', b'AAABAAEAAAAD') as a decorator on your test case
=========================== short test summary info ============================
FAILED tests/test_Decentraland.py::test_stateful - hypothesis.errors.Multiple...
======================== 1 failed in 206.84s (0:03:26) =========================
Terminating local RPC client...
